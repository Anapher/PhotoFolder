// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using PhotoFolder.Infrastructure.Data;

namespace PhotoFolder.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview8.19405.11");

            modelBuilder.Entity("PhotoFolder.Core.Domain.Entities.FileLocation", b =>
                {
                    b.Property<string>("RelativeFilename")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IndexedFileHash")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("RelativeFilename");

                    b.HasIndex("IndexedFileHash");

                    b.ToTable("FileLocation");
                });

            modelBuilder.Entity("PhotoFolder.Core.Domain.Entities.FileOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceFilename")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetFilename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("FileOperations");
                });

            modelBuilder.Entity("PhotoFolder.Core.Domain.Entities.IndexedFile", b =>
                {
                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("FileCreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<long>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("Hash");

                    b.ToTable("IndexedFiles");
                });

            modelBuilder.Entity("PhotoFolder.Core.Domain.Entities.FileLocation", b =>
                {
                    b.HasOne("PhotoFolder.Core.Domain.Entities.IndexedFile", null)
                        .WithMany("Files")
                        .HasForeignKey("IndexedFileHash");
                });

            modelBuilder.Entity("PhotoFolder.Core.Domain.Entities.IndexedFile", b =>
                {
                    b.OwnsOne("PhotoFolder.Core.Domain.PhotoProperties", "PhotoProperties", b1 =>
                        {
                            b1.Property<string>("IndexedFileHash")
                                .HasColumnType("TEXT");

                            b1.Property<string>("BitmapHash")
                                .IsRequired()
                                .HasColumnName("PhotoBitmapHash")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Height")
                                .HasColumnName("PhotoHeight")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Width")
                                .HasColumnName("PhotoWidth")
                                .HasColumnType("INTEGER");

                            b1.HasKey("IndexedFileHash");

                            b1.ToTable("IndexedFiles");

                            b1.WithOwner()
                                .HasForeignKey("IndexedFileHash");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
